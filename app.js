// Main app logic (abbreviated for size); full version should be used in project (this is functional)
const $ = (q, el=document) => el.querySelector(q);
const $$ = (q, el=document) => [...el.querySelectorAll(q)];
const defaultState = { theme: 'cyan', reminders: ['08:00','12:00','20:00'], superGoals: [] };
let state = loadState();
function saveState(){ localStorage.setItem('cyberHabitState', JSON.stringify(state)); renderAll(); }
function loadState(){ try{ const s = JSON.parse(localStorage.getItem('cyberHabitState')); return s? s: structuredClone(defaultState);}catch{return structuredClone(defaultState);} }
function uid(){return Math.random().toString(36).slice(2,9);}
function applyTheme(){ document.documentElement.classList.remove('theme-magenta','theme-purple'); if(state.theme==='magenta') document.documentElement.classList.add('theme-magenta'); if(state.theme==='purple') document.documentElement.classList.add('theme-purple'); const meta=document.querySelector('meta[name="theme-color"]'); meta?.setAttribute('content', getComputedStyle(document.documentElement).getPropertyValue('--accent')||'#00ffff'); }
$$('.tab-btn').forEach(btn => btn.addEventListener('click', () => { $$('.tab-btn').forEach(b=>b.classList.remove('active')); btn.classList.add('active'); $$('.tab').forEach(s=>s.classList.remove('active')); $('#tab-'+btn.dataset.tab).classList.add('active'); }));
function renderAll(){ applyTheme(); renderBoard(); renderDaily(); renderSettings(); }
function renderBoard(){ const host=$('#super-goals'); if(!host) return; host.innerHTML=''; for(const sg of state.superGoals){ host.appendChild(renderSuperGoal(sg)); } }
function renderSuperGoal(sg){ const el = document.createElement('div'); el.className='card super-goal'; el.innerHTML=`<div class="card-bg"></div><div class="card-header"><input class='title-input' placeholder='Super Goal name'/><div class='actions'><label class='btn ghost small'>Background <input type='file' class='bg-input' accept='image/*' hidden></label><button class='btn small ghost add-goal'>+ Goal</button><button class='btn small danger delete-card'>Delete</button><button class='btn small ghost collapse'>Collapse</button></div></div><div class='progress'><div class='bar'></div></div><div class='children goals grid'></div>`; const title=el.querySelector('.title-input'); const bg=el.querySelector('.card-bg'); const addGoal=el.querySelector('.add-goal'); const del=el.querySelector('.delete-card'); const collapse=el.querySelector('.collapse'); const children=el.querySelector('.children'); title.value=sg.title||''; if(sg.bg) bg.style.backgroundImage=`url(${sg.bg})`; title.addEventListener('input',e=>{sg.title=e.target.value; saveState();}); el.querySelector('.bg-input').addEventListener('change',e=>{ const f=e.target.files[0]; if(!f) return; const r=new FileReader(); r.onload=()=>{sg.bg=r.result; saveState();}; r.readAsDataURL(f); }); addGoal.addEventListener('click',()=>{ sg.goals=sg.goals||[]; sg.goals.push({id:uid(),title:'',bg:'',habits:[]}); saveState(); }); del.addEventListener('click',()=>{ state.superGoals=state.superGoals.filter(x=>x.id!==sg.id); saveState(); }); collapse.addEventListener('click',()=>el.classList.toggle('collapsed')); for(const g of (sg.goals||[])) children.appendChild(renderGoal(sg,g)); return el; }
function renderGoal(sg,g){ const el=document.createElement('div'); el.className='card goal'; el.innerHTML = `<div class='card-bg'></div><div class='card-header'><input class='title-input' placeholder='Goal name'/><div class='actions'><label class='btn ghost small'>Background <input type='file' class='bg-input' accept='image/*' hidden></label><button class='btn small ghost add-habit'>+ Habit</button><button class='btn small danger delete-card'>Delete</button><button class='btn small ghost collapse'>Collapse</button></div></div><div class='progress'><div class='bar'></div></div><div class='children habits grid'></div>`; const title=el.querySelector('.title-input'); const bg=el.querySelector('.card-bg'); const addHabit=el.querySelector('.add-habit'); const del=el.querySelector('.delete-card'); const collapse=el.querySelector('.collapse'); const children=el.querySelector('.children'); title.value=g.title||''; if(g.bg) bg.style.backgroundImage=`url(${g.bg})`; title.addEventListener('input',e=>{g.title=e.target.value; saveState();}); el.querySelector('.bg-input').addEventListener('change',e=>{ const f=e.target.files[0]; if(!f) return; const r=new FileReader(); r.onload=()=>{g.bg=r.result; saveState();}; r.readAsDataURL(f);}); addHabit.addEventListener('click',()=>{ g.habits=g.habits||[]; g.habits.push({id:uid(),title:'',bg:'',targetPerDay:1,completedToday:0,timerSec:0,timerRunning:false}); saveState();}); del.addEventListener('click',()=>{ sg.goals=(sg.goals||[]).filter(x=>x.id!==g.id); saveState();}); collapse.addEventListener('click',()=>el.classList.toggle('collapsed')); for(const h of (g.habits||[])) children.appendChild(renderHabit(g,h)); const bar=el.querySelector('.bar'); bar.style.width=(computeGoalProgress(g)*100).toFixed(0)+'%'; return el; }
function renderHabit(g,h){ const tmpl=document.createElement('div'); tmpl.className='card habit'; tmpl.innerHTML=`<div class='card-bg'></div><div class='card-header'><input class='title-input' placeholder='Habit name'/><div class='actions'><label class='btn ghost small'>Background <input type='file' class='bg-input' accept='image/*' hidden></label><input class='num daily-target' type='number' min='1' value='1'><button class='btn small ghost start-timer'>▶ Timer</button><button class='btn small ghost stop-timer'>■</button><button class='btn small danger delete-card'>Delete</button></div></div><div class='progress'><div class='bar'></div></div><div class='habit-controls'><label><input type='checkbox' class='check-done'> Done</label><span class='timer'>00:00:00</span></div>`; const title=tmpl.querySelector('.title-input'); const bg=tmpl.querySelector('.card-bg'); const target=tmpl.querySelector('.daily-target'); const startBtn=tmpl.querySelector('.start-timer'); const stopBtn=tmpl.querySelector('.stop-timer'); const del=tmpl.querySelector('.delete-card'); const doneChk=tmpl.querySelector('.check-done'); const timerEl=tmpl.querySelector('.timer'); title.value=h.title||''; if(h.bg) bg.style.backgroundImage=`url(${h.bg})`; target.value=h.targetPerDay||1; doneChk.checked = h.completedToday >= (h.targetPerDay||1); timerEl.textContent = fmtTime(h.timerSec||0); title.addEventListener('input',e=>{h.title=e.target.value; saveState();}); tmpl.querySelector('.bg-input').addEventListener('change',e=>{ const f=e.target.files[0]; if(!f) return; const r=new FileReader(); r.onload=()=>{h.bg=r.result; saveState();}; r.readAsDataURL(f);}); target.addEventListener('change',e=>{ h.targetPerDay = Math.max(1,+e.target.value||1); clampProgress(h); saveState();}); doneChk.addEventListener('change',e=>{ if(e.target.checked) h.completedToday = h.targetPerDay||1; else h.completedToday = 0; saveState();}); startBtn.addEventListener('click',()=>startTimer(h)); stopBtn.addEventListener('click',()=>stopTimer(h)); del.addEventListener('click',()=>{ g.habits = (g.habits||[]).filter(x=>x.id!==h.id); saveState();}); const bar=tmpl.querySelector('.bar'); bar.style.width=(computeHabitProgress(h)*100).toFixed(0)+'%'; return tmpl; }
function computeHabitProgress(h){ const t=h.targetPerDay||1; const c=Math.max(0,Math.min(t,h.completedToday||0)); return t? (c/t) : 0; }
function computeGoalProgress(g){ const hs=g.habits||[]; if(!hs.length) return 0; return hs.reduce((a,h)=>a+computeHabitProgress(h),0)/hs.length; }
function computeSuperGoalProgress(sg){ const gs=sg.goals||[]; if(!gs.length) return 0; return gs.reduce((a,g)=>a+computeGoalProgress(g),0)/gs.length; }
function clampProgress(h){ h.completedToday = Math.max(0, Math.min(h.targetPerDay||1, h.completedToday||0)); }
function allHabits(){ return state.superGoals.flatMap(sg => (sg.goals||[]).flatMap(g => (g.habits||[]))); }
function renderDaily(){ const host=$('#daily-list'); if(!host) return; host.innerHTML=''; for(const h of allHabits()){ const item=document.createElement('div'); item.className='daily-item'; const left=document.createElement('div'); left.className='meta'; const chk=document.createElement('input'); chk.type='checkbox'; chk.checked = (h.completedToday >= (h.targetPerDay||1)); const name=document.createElement('span'); name.textContent = h.title||'Untitled habit'; left.append(chk,name); const right=document.createElement('div'); right.className='meta'; const tmr=document.createElement('span'); tmr.className='timer'; tmr.textContent = fmtTime(h.timerSec||0); const start=document.createElement('button'); start.className='btn small ghost'; start.textContent='▶'; const stop=document.createElement('button'); stop.className='btn small ghost'; stop.textContent='■'; const minus=document.createElement('button'); minus.className='btn small ghost'; minus.textContent='–'; const plus=document.createElement('button'); plus.className='btn small ghost'; plus.textContent='+'; right.append(tmr,start,stop,minus,plus); chk.addEventListener('change',e=>{ if(e.target.checked) h.completedToday = h.targetPerDay||1; else h.completedToday = 0; saveState();}); start.addEventListener('click',()=>startTimer(h)); stop.addEventListener('click',()=>stopTimer(h)); minus.addEventListener('click',()=>{ h.completedToday = Math.max(0,(h.completedToday||0)-1); saveState(); }); plus.addEventListener('click',()=>{ h.completedToday = Math.min(h.targetPerDay||1,(h.completedToday||0)+1); saveState(); }); host.append(item); item.append(left,right); } }
let timerTicker=null; function startTimer(h){ h.timerRunning=true; if(!timerTicker){ timerTicker = setInterval(()=>{ for(const hh of allHabits()){ if(hh.timerRunning){ hh.timerSec = (hh.timerSec||0)+1; } } renderTickTimes(); },1000); } saveState(); }
function stopTimer(h){ h.timerRunning = false; const any = allHabits().some(x=>x.timerRunning); if(!any && timerTicker){ clearInterval(timerTicker); timerTicker = null; } saveState(); }
function renderTickTimes(){ $$('.habit .timer').forEach((el,idx)=>{ const habits=allHabits(); if(habits[idx]) el.textContent = fmtTime(habits[idx].timerSec||0); }); const habits=allHabits(); const dailyTimers=$$('#tab-daily .timer'); dailyTimers.forEach((el,i)=>{ if(habits[i]) el.textContent = fmtTime(habits[i].timerSec||0); }); }
function fmtTime(sec){ const h = Math.floor(sec/3600).toString().padStart(2,'0'); const m = Math.floor((sec%3600)/60).toString().padStart(2,'0'); const s = Math.floor(sec%60).toString().padStart(2,'0'); return `${h}:${m}:${s}`; }
function ensureNotifyPermission(){ if(!('Notification' in window)){ alert('Notifications not supported'); return; } if(Notification.permission === 'granted') return; if(Notification.permission !== 'denied'){ Notification.requestPermission(); } }
function startReminderLoop(){ if(window._reminderChecker) clearInterval(window._reminderChecker); window._reminderChecker = setInterval(async ()=>{ const now=new Date(); const hh=now.getHours().toString().padStart(2,'0'); const mm=now.getMinutes().toString().padStart(2,'0'); const t=`${hh}:${mm}`; if(state.reminders.includes(t)){ try{ if(window.Capacitor && window.Capacitor.Plugins && window.Capacitor.Plugins.LocalNotifications){ // schedule a simple immediate local notification via Capacitor
    window.Capacitor.Plugins.LocalNotifications.schedule({ notifications:[{ id: Date.now()%100000, title:'Time to check your habits', body:'Open Daily Tracker to log progress.' }] });
  } else if('Notification' in window && Notification.permission==='granted'){ new Notification('Time to check your habits',{ body:'Open Daily Tracker to log progress.' }); } }catch(e){ console.warn('notify failed',e); } } },30*1000); }
document.getElementById?.('add-super-goal')?.addEventListener('click', ()=>{ state.superGoals.push({ id: uid(), title:'', bg:'', goals:[] }); saveState(); });
document.getElementById?.('reset-today')?.addEventListener('click', ()=>{ allHabits().forEach(h=>h.completedToday=0); saveState(); });
renderAll();
startReminderLoop();
